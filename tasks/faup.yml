---

- name: Ensure git is present
  ansible.builtin.package:
    name: git
    state: present

- name: Git clone faup
  ansible.builtin.git:
    repo: https://github.com/stricaud/faup.git
    dest: "{{ toolsetdir }}/faup"
    version: "{{ faup_version }}"
  register: dl_result
  until: dl_result is success

- name: Faup dependencies
  ansible.builtin.package:
    name: "{{ item }}"
    state: "present"
  with_items: "{{ faup_deps }}"
  register: pkg_result
  until: pkg_result is success

- name: Redhat8 | force latest libarchive - cmake workaround  # noqa package-latest
  ansible.builtin.package:
    name: libarchive
    state: latest
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version | int == 8)

- name: Compile faup
  ansible.builtin.command: "{{ item }}"
  args:
    chdir: "{{ toolsetdir }}/faup/build"
    creates: "{{ toolsetdir }}/faup/build/src/tools/faup"
  with_items:
    - cmake ..
    - make
- name: Ubuntu | ensure appropriate path for shared libraries
  ansible.builtin.lineinfile:
    dest: /etc/ld.so.conf.d/x86_64-linux-gnu.conf
    line: '/usr/local/lib/x86_64-linux-gnu'
    mode: '0644'
    create: yes
  when: ansible_distribution == 'Ubuntu'
  notify:
    - Run ldconfig
- name: RedHat | ensure appropriate path for shared libraries
  ansible.builtin.lineinfile:
    dest: /etc/ld.so.conf.d/x86_64-linux-gnu.conf
    line: '/usr/local/lib64'
    mode: '0644'
    create: yes
  when: ansible_os_family == "RedHat"
  notify:
    - Run ldconfig

- name: Install faup
  ansible.builtin.command: "{{ item }}"
  args:
    chdir: "{{ toolsetdir }}/faup/build"
    creates: "/usr/local/bin/faup"
  with_items:
    - make install
  notify:
    - Run ldconfig

- name: System python
  when: faup_virtualenv_path is not defined or not faup_virtualenv_path
  block:
    - name: Check if existing faup python bindings
      ansible.builtin.command: "find /usr/lib/ /usr/local/lib/ -iname 'pyfaup*'"
      register: find
      changed_when: false
      failed_when: false
    - name: Find result
      ansible.builtin.debug:
        var: find
    - name: Pip show
      ansible.builtin.command: "{{ faup_python_pip | default('pip') }} show pyfaup"
      register: pipshow
      changed_when: false
      failed_when: false
    - name: Pip show result
      ansible.builtin.debug:
        var: pipshow
    # https://www.jeffgeerling.com/blog/2023/how-solve-error-externally-managed-environment-when-installing-pip3
    - name: Ignore PEP 668
      ansible.builtin.file:
        path: "/usr/lib/python{{ faup_python_version | default('3.12') }}/EXTERNALLY-MANAGED"
        state: absent
      when: >
        (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 24) or
        (ansible_distribution == 'Debian' and ansible_distribution_major_version|int == 12)
    - name: Install faup python bindings
      ansible.builtin.command: "{{ faup_python_pip | default('pip') }} install ."
      args:
        chdir: "{{ toolsetdir }}/faup/src/lib/bindings/python"
        creates: "{{ faup_python_bindings }}"

- name: Virtualenv python
  when: faup_virtualenv_path is defined and faup_virtualenv_path
  block:
    - name: Virtualenv dependencies
      ansible.builtin.package:
        name: "{{ faup_python_pkgs }}"
        state: present
      register: pkg_install
      until: pkg_install is success
    # if user exists with running process, usermod can't edit it and fails
    - name: Check if virtualenv user exists - {{ faup_virtualenv_user }}
      ansible.builtin.command: "grep {{ faup_virtualenv_user }} /etc/passwd"
      changed_when: false
      ignore_errors: true
      register: haveuser
    - name: Ensure virtualenv user exists - {{ faup_virtualenv_user }}
      ansible.builtin.user:
        name: "{{ faup_virtualenv_user }}"
        home: "{{ faup_virtualenv_home }}"
        state: present
      when: haveuser is failed and faup_virtualenv_user != 'root' and faup_virtualenv_user != 'nobody' and faup_virtualenv_user != 'www-data'
    # - name: debian | install faup python bindings - virtualenv
    #   ansible.builtin.pip:
    #     name: "file://{{ toolsetdir }}/faup/src/lib/bindings/python"
    #     virtualenv: "{{ faup_virtualenv_path }}"
    ### FIXME! end with owner root
    #   become: yes
    #   become_user: "{{ faup_virtualenv_user }}"
    #   when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ## centos7: previous command fails silently
    - name: Ensure virtualenv dirname path exists
      ansible.builtin.file:
        dest: "{{ faup_virtualenv_path | dirname }}"
        state: directory
        mode: '0755'
        owner: "{{ faup_virtualenv_user }}"
      when: faup_virtualenv_path | dirname | dirname != '/home'
    - name: Ensure directories ownership if needed, like pip cache
      ansible.builtin.file:
        dest: "{{ item.d }}"
        state: "{{ item.s }}"
        mode: "{{ item.m }}"
        owner: "{{ item.o }}"
      with_items: "{{ faup_ownership | default([]) }}"
    - name: Install faup python bindings - virtualenv
      ansible.builtin.command: "{{ item.c }}"
      args:
        creates: "{{ item.t }}"
      # https://github.com/pypa/virtualenv/issues/2350
      environment:
        DEB_PYTHON_INSTALL_LAYOUT: 'deb'
      with_items:
        - { c: "virtualenv -p {{ faup_python_bin }} {{ faup_virtualenv_path }}", t: "{{ faup_virtualenv_path }}" }
        - { c: "{{ faup_virtualenv_path }}/bin/pip install file://{{ toolsetdir }}/faup/src/lib/bindings/python/",
            t: "{{ faup_python_bindings | regex_replace('/usr', faup_virtualenv_path) }}"
        }
      become: yes
      become_user: "{{ faup_virtualenv_user }}"
      # when: ansible_os_family == "RedHat"
      ## FIXME! not idempotent
      # - name: ensure right permissions
      #   ansible.builtin.file: "dest={{ faup_virtualenv_path }} state=directory owner={{ faup_virtualenv_user }} recurse=yes"
      #   command: "{{ item }}"
      #   args:
      #     chdir: "{{ toolsetdir }}/faup/src/lib/bindings/python"
      #     creates: "{{ faup_virtualenv_path }}/lib/python2.7/site-packages/pyfaup-1.0-py2.7.egg"
      #   with_items:
      #     - "{{ faup_virtualenv_path }}/bin/python setup.py build"
      #     - "{{ faup_virtualenv_path }}/bin/python setup.py install"
